parameters:
- name: preBuildSteps
  displayName: 'Setups to run before building and testing happens'
  type: stepList
  default: []
- name: postBuildSteps
  displayName: 'Setups to run before building and testing happens'
  type: stepList
  default: []
- name: jobName
  type: string
- name: vmImage
  type: string
- name: os
  type: string
- name: stackRoot
  default: "$(System.DefaultWorkingDirectory)/.stack"
- name: stackWork
  default: ".stack-work"
- name: stackProjectPath
  displayName: "Path to the project. Must end with trailing slash"
  default: "$(Build.SourcesDirectory)/scheduler/"
- name: cacheVersion
  type: string
  default: cache-v1
- name: doctestAllowFailure
  type: boolean
  default: false

jobs:
- job: ${{ parameters.jobName }}
  timeoutInMinutes: 120
  variables:
    STACK_ROOT: "${{ parameters.stackRoot }}"
    STACK_WORK: "${{ parameters.stackWork }}"
    STACK_WORK_FULL: "${{ parameters.stackProjectPath }}${{ parameters.stackWork }}"
    BUILD_ARGS: "-j 2 --no-terminal --bench --no-run-benchmarks --haddock --no-haddock-deps"
  pool:
    vmImage: ${{ parameters.vmImage }}
  strategy:
    matrix:
      lts-12.26:
        RESOLVER: "lts-12.26"
        STACK_YAML: "stack-extra-deps.yaml"
        ALLOW_TO_FAIL: ""
      lts-13.30:
        RESOLVER: "lts-13.30"
        STACK_YAML: "stack-extra-deps.yaml"
        ALLOW_TO_FAIL: ""
      lts-14.27:
        RESOLVER: "lts-14.27"
        STACK_YAML: "stack-extra-deps.yaml"
        ALLOW_TO_FAIL: ""
      lts-16:
        RESOLVER: "lts-16"
        STACK_YAML: "stack.yaml"
        ALLOW_TO_FAIL: ""
      nightly:
        RESOLVER: "nightly"
        STACK_YAML: "stack.yaml"
        ALLOW_TO_FAIL: "|| echo 'Allow to fail'"
    maxParallel: 5
  steps:
  - task: Cache@2
    displayName: Cache STACK_ROOT
    inputs:
      key: '"${{ parameters.cacheVersion }}" | ${{ parameters.jobName }}" | "STACK_ROOT" | "$(RESOLVER)" | "$(Build.SourceBranch)"'
      path: "$(STACK_ROOT)"
      restoreKeys: |
        "${{ parameters.cacheVersion }}" | ${{ parameters.jobName }}" | "STACK_ROOT" | "$(RESOLVER)" | "$(Build.SourceBranch)"
        "${{ parameters.cacheVersion }}" | ${{ parameters.jobName }}" | "STACK_ROOT" | "$(RESOLVER)" | "refs/heads/master"
      cacheHitVar: STACK_ROOT_RESTORED
    continueOnError: true
  - task: Cache@2
    displayName: Cache STACK_WORK
    inputs:
      key: '"${{ parameters.cacheVersion }}" | ${{ parameters.jobName }}" | "STACK_WORK" | "$(RESOLVER)" | "$(Build.SourceBranch)"'
      path: "$(STACK_WORK_FULL)"
      restoreKeys: |
        "${{ parameters.cacheVersion }}" | ${{ parameters.jobName }}" | "STACK_WORK" | "$(RESOLVER)" | "$(Build.SourceBranch)"
        "${{ parameters.cacheVersion }}" | ${{ parameters.jobName }}" | "STACK_WORK" | "$(RESOLVER)" | "refs/heads/master"
      cacheHitVar: STACK_WORK_RESTORED
    continueOnError: true
  - ${{ each step in parameters.preBuildSteps }}:
    - ${{ each pair in step }}:
        ${{ pair.key }}: ${{ pair.value }}
  - task: Bash@3
    displayName: Setup environment
    inputs:
      targetType: 'inline'
      script: |
        set -x
        # Install stack
        curl -sSL https://get.haskellstack.org/ | sh -s - -f
        # Script for restoring source files modification time from commit to avoid recompilation.
        curl -sSL https://gist.githubusercontent.com/lehins/fd36a8cc8bf853173437b17f6b6426ad/raw/d9ddb32cac2f0dc6800be4fa54d450f0dcda6c60/git-modtime.hs -o git-modtime.hs
        # Restore mod time and setup ghc, if it wasn't restored from cache
        stack script --resolver ${RESOLVER} git-modtime.hs
  - task: Bash@3
    displayName: 'stack build'
    env:
      ARGS: "--resolver $(RESOLVER) --stack-yaml $(STACK_YAML)"
    inputs:
      targetType: 'inline'
      script: |
        set -x
        stack ${ARGS} test --no-run-tests ${BUILD_ARGS} $(ALLOW_TO_FAIL)
  - task: Bash@3
    displayName: 'scheduler:tests'
    env:
      ARGS: "--resolver $(RESOLVER) --stack-yaml $(STACK_YAML)"
    inputs:
      targetType: 'inline'
      script: |
        set -x
        stack ${ARGS} test scheduler:tests ${BUILD_ARGS} $(ALLOW_TO_FAIL)
  - task: Bash@3
    displayName: 'scheduler:doctests'
    env:
      ARGS: "--resolver $(RESOLVER) --stack-yaml $(STACK_YAML)"
    inputs:
      targetType: 'inline'
      script: |
        set -x
        stack ${ARGS} test scheduler:doctests ${BUILD_ARGS} $(ALLOW_TO_FAIL)
    continueOnError: ${{ parameters.doctestAllowFailure }}
  - ${{ each step in parameters.postBuildSteps }}:
    - ${{ each pair in step }}:
        ${{ pair.key }}: ${{ pair.value }}
